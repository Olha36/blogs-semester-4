{"mappings":"AAAA,IAAI,aAAa,EAAE;AACnB,IAAI;AAEJ,eAAe;IACb,IAAI;QACF,MAAM,WAAW,MAAM,MAAM;QAE7B,QAAQ,GAAG,CAAC,oBAAoB,SAAS,MAAM;QAE/C,IAAI,CAAC,SAAS,EAAE,EACd,MAAM,IAAI,MAAM;QAGlB,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,QAAQ,GAAG,CAAC,iBAAiB;QAC7B,aAAa;IAEf,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qCAAqC;IACrD;AACF;AAEA,eAAe,WAAW,KAAK,EAAE,OAAO;IACtC,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,+BAA+B;YAC1D,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;gBAAE;gBAAO;YAAQ;QACxC;QACA,QAAQ,GAAG,CAAC,UAAU;QAEtB,IAAI,CAAC,SAAS,EAAE,EACd,MAAM,IAAI,MAAM;QAGlB,MAAM,UAAU,MAAM,SAAS,IAAI;QACnC,WAAW,IAAI,CAAC;QAChB,QAAQ,GAAG,CAAC,8BAA8B;QAC1C,YAAY;IACd,EAAE,OAAO,OAAO;QACd,QAAQ,GAAG,CAAC;IACd;AACF;AAEA,MAAM,aAAa,OAAO,IAAI,OAAO;IACnC,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,CAAC,4BAA4B,EAAE,IAAI,EAAE;YAChE,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;gBAAE;gBAAO;YAAQ;QACxC;QAEA,IAAI,CAAC,SAAS,EAAE,EACd,MAAM,IAAI,MAAM;QAGlB,MAAM,cAAc,MAAM,SAAS,IAAI;QACvC,QAAQ,GAAG,CAAC,iBAAiB;QAE7B,aAAa,WAAW,GAAG,CAAC,CAAC,OAC3B,KAAK,EAAE,KAAK,KAAK;gBAAE,GAAG,IAAI;gBAAE;gBAAO;YAAQ,IAAI;QAEjD,YAAY;IACd,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;IACxC;AACF;AAEA,eAAe,WAAW,EAAE;IAC1B,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,CAAC,4BAA4B,EAAE,IAAI,EAAE;YAChE,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;QACF;QAEA,QAAQ,GAAG,CAAC,wBAAwB;QAEpC,IAAI,CAAC,SAAS,EAAE,EACd,MAAM,IAAI,MAAM;QAGlB,aAAa,WAAW,MAAM,CAAC,CAAC,OAAS,KAAK,EAAE,KAAK,OAAO;QAC5D,YAAY;IACd,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;IACvC;AACF;AAEA,eAAe,cAAc,MAAM,EAAE,WAAW;IAC9C,QAAQ,GAAG,CACT,kDACA,QACA,YACA;IAGF,IAAI,CAAC,UAAU,SAAS,GAAG;QACzB,QAAQ,KAAK,CAAC,2BAAsB;QACpC;IACF;IAEA,IAAI;QACF,MAAM,WAAW,MAAM,MACrB,CAAC,4BAA4B,EAAE,OAAO,SAAS,CAAC,EAChD;YACE,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;gBAAE,SAAS;YAAY;QAC9C;QAGF,IAAI,CAAC,SAAS,EAAE,EACd,MAAM,IAAI,MACR,CAAC,uDAAuD,EAAE,SAAS,MAAM,EAAE;QAI/E,MAAM,SAAS,MAAM,SAAS,IAAI;QAClC,QAAQ,GAAG,CAAC,yBAAoB;QAEhC,aAAa,WAAW,GAAG,CAAC,CAAC,OAC3B,KAAK,EAAE,KAAK,SACR;gBAAE,GAAG,IAAI;gBAAE,UAAU;uBAAK,KAAK,QAAQ,IAAI,EAAE;oBAAG,OAAO,OAAO;iBAAC;YAAC,IAChE;QAEN,YAAY;IACd,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAA6B;IAC7C;AACF;AAEA,SAAS,YAAY,KAAK;IACxB,MAAM,gBAAgB,SAAS,aAAa,CAAC;IAE7C,IAAI,CAAC,UACH,OAAO,QAAQ,GAAG,CAAC;IAErB,MAAM,eAAe,SAAS;QAAE;IAAM;IACtC,cAAc,SAAS,GAAG;AAC5B;AAEA,SAAS,cAAc,CAAC,kBAAkB,gBAAgB,CAAC,UAAU,CAAC;IACpE,EAAE,cAAc;IAChB,MAAM,QAAQ,SAAS,cAAc,CAAC,cAAc,KAAK;IACzD,MAAM,UAAU,SAAS,cAAc,CAAC,gBAAgB,KAAK;IAC7D,WAAW,OAAO;IAElB,SAAS,cAAc,CAAC,cAAc,KAAK,GAAG;IAC9C,SAAS,cAAc,CAAC,gBAAgB,KAAK,GAAG;AAClD;AAEA,SAAS,gBAAgB,CAAC,SAAS,SAAU,KAAK;IAChD,IAAI,MAAM,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,mBAAmB;QACrD,MAAM,SAAS,MAAM,MAAM,CAAC,YAAY,CAAC;QACzC,MAAM,WAAW,OAAO;QACxB,MAAM,UAAU,OAAO;QAEvB,IAAI,YAAY,SAAS;YACvB,QAAQ,GAAG,CAAC,CAAC,uBAAuB,EAAE,QAAQ;YAC9C,WAAW,OAAO,SAAS,UAAU;QACvC;IACF;AACF;AAEA,SAAS,gBAAgB,CAAC,SAAS,CAAC;IAClC,IAAI,MAAM,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,qBAAqB;QACvD,MAAM,KAAK,MAAM,MAAM,CAAC,YAAY,CAAC;QACrC,IAAI,IAAI;YACN,QAAQ,GAAG,CAAC,sCAAsC;YAClD,WAAW;QACb,OACE,QAAQ,KAAK,CAAC;IAElB;AACF;AAEA,SAAS,gBAAgB,CAAC,UAAU,CAAC;IACnC,IAAI,MAAM,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,sBAAsB;QACxD,MAAM,cAAc;QAEpB,MAAM,SAAS,OAAO,MAAM,MAAM,CAAC,YAAY,CAAC;QAChD,MAAM,eAAe,MAAM,MAAM,CAAC,aAAa,CAAC;QAChD,MAAM,cAAc,aAAa,KAAK,CAAC,IAAI;QAE3C,IAAI,CAAC,aAAa;YAChB,QAAQ,KAAK,CAAC;YACd;QACF;QAEA,cAAc,QAAQ;QACtB,aAAa,KAAK,GAAG;IACvB;AACF;AAEA,eAAe;IACb,MAAM,QAAQ,MAAM;IACpB,MAAM,gBAAgB,SAAS,aAAa,CAAC;IAE7C,MAAM,SACJ,cAAc,SAAS,IACvB,cAAc,OAAO,CAAC,iBAAiB,CAAC,SAAS;IACnD,IAAI,CAAC,OAAO,IAAI,IAAI;QAClB,QAAQ,KAAK,CAAC;QACd;IACF;IAEA,WAAW,WAAW,OAAO,CAAC;IAC9B,YAAY;AACd;AAEA","sources":["public/script.js"],"sourcesContent":["let postsArray = [];\nlet template;\n\nasync function getPosts() {\n  try {\n    const response = await fetch(\"http://localhost:3000/posts\");\n\n    console.log(\"Response status:\", response.status);\n\n    if (!response.ok) {\n      throw new Error(\"Network Error Response Identified\");\n    }\n\n    const data = await response.json();\n    console.log(\"Fetched data:\", data);\n    postsArray = data;\n\n  } catch (error) {\n    console.error(\"Error fetching or processing data\", error);\n  }\n}\n\nasync function createPost(title, content) {\n  try {\n    const response = await fetch(\"http://localhost:3000/posts\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ title, content }),\n    });\n    console.log(response, \"response\");\n\n    if (!response.ok) {\n      throw new Error(\"Failed to create post\");\n    }\n\n    const newPost = await response.json();\n    postsArray.push(newPost);\n    console.log(\"Rendering posts with data:\", postsArray);\n    renderPosts(postsArray);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nconst updatePost = async (id, title, content) => {\n  try {\n    const response = await fetch(`http://localhost:3000/posts/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ title, content }),\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Failed to update post\");\n    }\n\n    const updatedPost = await response.json();\n    console.log(\"Updated post:\", updatedPost);\n\n    postsArray = postsArray.map((post) =>\n      post.id === id ? { ...post, title, content } : post\n    );\n    renderPosts(postsArray);\n  } catch (error) {\n    console.error(\"Error updating post:\", error);\n  }\n};\n\nasync function deletePost(id) {\n  try {\n    const response = await fetch(`http://localhost:3000/posts/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    console.log(\"deletePost response:\", response);\n\n    if (!response.ok) {\n      throw new Error(\"Failed to delete the post\");\n    }\n\n    postsArray = postsArray.filter((post) => post.id !== Number(id));\n    renderPosts(postsArray);\n  } catch (error) {\n    console.error(\"Error deleting post\", error);\n  }\n}\n\nasync function createComment(postId, commentText) {\n  console.log(\n    \"🚨 Debugging createComment | postId:\",\n    postId,\n    \"Comment:\",\n    commentText\n  );\n\n  if (!postId || postId < 1) {\n    console.error(\"❌ Invalid post ID:\", postId);\n    return;\n  }\n\n  try {\n    const response = await fetch(\n      `http://localhost:3000/posts/${postId}/comments`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ content: commentText }),\n      }\n    );\n\n    if (!response.ok) {\n      throw new Error(\n        `Failed to create comment. Server responded with status ${response.status}`\n      );\n    }\n\n    const result = await response.json();\n    console.log(\"✅ Comment added:\", result);\n\n    postsArray = postsArray.map((post) =>\n      post.id === postId\n        ? { ...post, comments: [...(post.comments || []), result.comment] }\n        : post\n    );\n    renderPosts(postsArray);\n  } catch (error) {\n    console.error(\"❌ Error creating comment:\", error);\n  }\n}\n\nfunction renderPosts(posts) {\n  const menuContainer = document.querySelector(\".menuContainer\");\n\n  if (!template) {\n    return console.log(\"Template not found\");\n  }\n  const postTemplate = template({ posts });\n  menuContainer.innerHTML = postTemplate;\n}\n\ndocument.getElementById(\"createPostForm\").addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n  const title = document.getElementById(\"titleInput\").value;\n  const content = document.getElementById(\"contentInput\").value;\n  createPost(title, content);\n\n  document.getElementById(\"titleInput\").value = \"\";\n  document.getElementById(\"contentInput\").value = \"\";\n});\n\ndocument.addEventListener(\"click\", function (event) {\n  if (event.target.classList.contains(\"editPostButton\")) {\n    const findId = event.target.getAttribute(\"data-id\");\n    const newTitle = prompt(\"Enter new title:\");\n    const newText = prompt(\"Enter new content:\");\n\n    if (newTitle && newText) {\n      console.log(`Updating post with ID: ${findId}`);\n      updatePost(Number(findId), newTitle, newText);\n    }\n  }\n});\n\ndocument.addEventListener(\"click\", (event) => {\n  if (event.target.classList.contains(\"deletePostButton\")) {\n    const id = event.target.getAttribute(\"data-id\");\n    if (id) {\n      console.log(\"Delete button clicked for post ID:\", id);\n      deletePost(id);\n    } else {\n      console.error(\"No valid post ID found for delete operation.\");\n    }\n  }\n});\n\ndocument.addEventListener(\"submit\", (event) => {\n  if (event.target.classList.contains(\"createCommentForm\")) {\n    event.preventDefault();\n\n    const postId = Number(event.target.getAttribute(\"data-post-id\"));\n    const commentInput = event.target.querySelector(\".commentInput\");\n    const commentText = commentInput.value.trim();\n\n    if (!commentText) {\n      console.error(\"Comment cannot be empty\");\n      return;\n    }\n\n    createComment(postId, commentText);\n    commentInput.value = \"\";\n  }\n});\n\nasync function startApp() {\n  const posts = await getPosts();\n  const sourceElement = document.querySelector(\".menuTemplate\");\n\n  const source =\n    sourceElement.innerHTML ||\n    sourceElement.content.firstElementChild.innerHTML;\n  if (!source.trim()) {\n    console.error(\"Template source is empty\");\n    return;\n  }\n\n  template = Handlebars.compile(source);\n  renderPosts(postsArray);\n}\n\nstartApp();\n"],"names":[],"version":3,"file":"index.f3bd186e.js.map","sourceRoot":"/__parcel_source_root/"}